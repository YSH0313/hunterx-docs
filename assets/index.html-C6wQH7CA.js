import{_ as a,c as i,d as o,a as r,f as d,o as c,r as n}from"./app-B3GkPK4x.js";const l={};function p(s,e){const t=n("ImageCard");return c(),i("div",null,[e[0]||(e[0]=o("h2",{id:"架构图",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#架构图"},[o("span",null,"架构图")])],-1)),r(t,{image:"/framework.png",title:"HunterX架构图",description:"通过这个图形，你可以清晰的了解到框架内部的运作机制，以及请求的生命周期。",href:"/",author:"yuanshaohang"}),e[1]||(e[1]=d('<h2 id="拆分讲解" tabindex="-1"><a class="header-anchor" href="#拆分讲解"><span>拆分讲解</span></a></h2><ul><li><code>Spider-start_requests</code>：爬虫任务起始位置</li><li><code>middleware</code>：中间件hook模块</li><li><code>Spider-Manager</code>：任务管理中心</li><li><code>Scheduler</code>：任务调度模块</li><li><code>Downloader</code>：下载器模块</li><li><code>Item</code>：数据存储模块</li><li><code>Pipeline</code>：数据处理管道模块</li></ul><h2 id="流程说明" tabindex="-1"><a class="header-anchor" href="#流程说明"><span>流程说明</span></a></h2><ol><li><code>start_requests</code> 生成起始请求给到 <code>Spider-Manager</code></li><li><code>Spider-Manager</code> 异步启动生产者将请求体消息，根据优先级放到请求队列，同时也异步启动消费者</li><li><code>消费者</code> 按照优先级顺序传递给 <code>Scheduler</code></li><li><code>Scheduler</code> 按照消息体内容，传递请求体回到 <code>Spider-Manager</code></li><li><code>Spider-Manager</code> 调用 <code>Downloader</code> 进行数据下载</li><li><code>Downloader</code> 将响应内容返回给 <code>Spider-Manager</code></li><li><code>Spider-Manager</code> 将响应内容反馈到爬虫解析模块</li><li>爬虫解析模块进行数据解析并将数据传递给 <code>Item</code></li><li><code>Item</code> 将数据暂时保存，等待 <code>pipeline</code> 的接收处理</li><li><code>pipeline</code> 接受并处理 <code>Item</code> 的数据，清洗或持久化等操作</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>以上每一个步骤都是异步进行操作，所有可能出现阻塞的地方都会进行异步等待，提高整体架构流程的效率</p></div>',5))])}const h=a(l,[["render",p],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/guide/nwr4dcln/","title":"架构原理","lang":"zh-CN","frontmatter":{"title":"架构原理","icon":"carbon:reference-architecture","createTime":"2025/01/11 21:12:27","permalink":"/guide/nwr4dcln/","description":"架构图","head":[["meta",{"property":"og:url","content":"https://hunterx-docs.com/guide/nwr4dcln/"}],["meta",{"property":"og:site_name","content":"HunterX 文档"}],["meta",{"property":"og:title","content":"架构原理"}],["meta",{"property":"og:description","content":"架构图"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T07:35:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T07:35:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"架构原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-16T07:35:54.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.18,"words":355},"git":{"updatedTime":1737012954000,"contributors":[{"name":"袁少航","username":"袁少航","email":"yuanshaohang@dataoceanai.com","commits":1,"avatar":"https://avatars.githubusercontent.com/袁少航?v=4","url":"https://github.com/袁少航"}]},"autoDesc":true,"filePathRelative":"notes/guide/4.framework.md","bulletin":true}');export{h as comp,u as data};
